# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'detail.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import os
from PyQt5 import QtCore, QtGui, QtWidgets

MyNumber = 0



class Ui_Display(object):
    def setupUi(self, Display):
        Display.setObjectName("Display")
        Display.resize(683, 551)
        self.centralwidget = QtWidgets.QWidget(Display)
        self.centralwidget.setObjectName("centralwidget")
        self.photo_img = QtWidgets.QLabel(self.centralwidget)
        self.photo_img.setGeometry(QtCore.QRect(10, 10, 661, 481))
        self.photo_img.setFrameShape(QtWidgets.QFrame.Box)
        self.photo_img.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.photo_img.setText("")
        self.photo_img.setScaledContents(True)
        self.photo_img.setObjectName("photo_img")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 490, 661, 31))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.load_btn = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.load_btn.setFont(font)
        self.load_btn.setObjectName("load_btn")
        self.horizontalLayout.addWidget(self.load_btn)
        self.next_btn = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.next_btn.setFont(font)
        self.next_btn.setObjectName("next_btn")
        self.horizontalLayout.addWidget(self.next_btn)
        self.save_file = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.save_file.setFont(font)
        self.save_file.setObjectName("save_file")
        self.horizontalLayout.addWidget(self.save_file)
        self.close_btn = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.close_btn.clicked.connect(Display.close)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.close_btn.setFont(font)
        self.close_btn.setObjectName("close_btn")
        self.horizontalLayout.addWidget(self.close_btn)
        Display.setCentralWidget(self.centralwidget)

        self.retranslateUi(Display)
        QtCore.QMetaObject.connectSlotsByName(Display)


    def retranslateUi(self, Display):
        _translate = QtCore.QCoreApplication.translate
        Display.setWindowFlag(QtCore.Qt.WindowMaximizeButtonHint, False)
        Display.setWindowTitle(_translate("Display", "Fraunhofer Cell Counting App"))
        self.load_btn.setText(_translate("Display", "Load Images"))
        self.next_btn.setText(_translate("Display", "Next Image"))
        self.save_file.setText(_translate("Display", "Save Output"))
        self.close_btn.setText(_translate("Display", "Close"))

        self.load_btn.clicked.connect(self.loadImage)
        self.next_btn.clicked.connect(self.nextImage)
        self.save_file.clicked.connect(self.save_images)
        

        self.dirIterator = None
        self.fileList = []
    


    def loadImage(self):
        #Path output_images
        try:
            dir = "test_images/output_images"
            for file in os.listdir(dir):
                fpath = os.path.join(dir, file)
                self.photo_img.setPixmap(QtGui.QPixmap(fpath))
                if os.path.isfile(fpath) and file.endswith(('.png', '.jpg', '.jpeg')):
                    self.fileList.append(fpath)
            self.fileList.sort()
            self.dirIterator = iter(self.fileList)
        except IOError:
            print ("Error: Follow the neccessary steps and stop testing my Code")


    def nextImage(self):
        # ensure that the file list has not been cleared due to missing files
        if self.fileList:
            try:
                nextfile = next(self.dirIterator)
                self.photo_img.setPixmap(QtGui.QPixmap(nextfile))      
            except:
                # the iterator has finished, restart it
                self.dirIterator = iter(self.fileList)
                self.nextImage()
        else:
            # no file list found, load an image
            try:
                self.loadImage()
            except ValueError as e:
                print('Error: The selected folder does not contain any images, Run the detect model first')
      

    def save_images(self):
        try:
            import os
            from pathlib import Path

            global MyNumber
            MyNumber += 1 
            dir = "test_images/output_images"
            dir2 = Path("test_images/Experiment/")
            
            if os.path.exists(dir):
                os.rename(dir, dir2)
        except IOError:
            print ("Error: Follow the neccessary steps and stop testing my Code")




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Display = QtWidgets.QMainWindow()
    ui = Ui_Display()
    ui.setupUi(Display)
    Display.show()
    sys.exit(app.exec_())
