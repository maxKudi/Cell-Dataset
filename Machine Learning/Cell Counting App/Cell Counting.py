# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import datetime
import os
import pathlib
import glob
from PIL import Image
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer, QTime
from details import Ui_Display
from opcua import Client


try:   
    url = "opc.tcp://<ip here>"
    client = Client(url)
    client.connect()
    mydonebit = client.get_node("ns=2; i=3")
    mystartbit = client.get_node("ns=2; i=4")
    mystartbit = bool(mystartbit.get_data_value())
except IOError:
    print ("Error: Not Connected")


class Ui_CellAI(object):
    def setupUi(self, CellAI):
        CellAI.setObjectName("CellAI")
        CellAI.resize(1031, 603)
        self.centralwidget = QtWidgets.QWidget(CellAI)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(720, 110, 291, 461))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.ResultLabel = QtWidgets.QLabel(self.groupBox)
        self.ResultLabel.setGeometry(QtCore.QRect(10, 20, 271, 391))
        self.ResultLabel.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.ResultLabel.setFrameShadow(QtWidgets.QFrame.Plain)
        self.ResultLabel.setText("")
        self.ResultLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.ResultLabel.setIndent(-1)
        self.ResultLabel.setObjectName("ResultLabel")
        self.photo_img = QtWidgets.QLabel(self.centralwidget)
        self.photo_img.setGeometry(QtCore.QRect(10, 10, 681, 521))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.photo_img.sizePolicy().hasHeightForWidth())
        self.photo_img.setSizePolicy(sizePolicy)
        self.photo_img.setFrameShape(QtWidgets.QFrame.Box)
        self.photo_img.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.photo_img.setText("")
        self.photo_img.setScaledContents(True)
        self.photo_img.setObjectName("photo_img")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 540, 681, 31))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.open_file = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.open_file.setFont(font)
        self.open_file.setObjectName("open_file")
        self.horizontalLayout.addWidget(self.open_file)
        self.detect_btn = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.detect_btn.setFont(font)
        self.detect_btn.setObjectName("detect_btn")
        self.horizontalLayout.addWidget(self.detect_btn)
        self.clear_work = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.clear_work.setFont(font)
        self.clear_work.setObjectName("clear_work")
        self.horizontalLayout.addWidget(self.clear_work)
        self.view_work = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.view_work.setFont(font)
        self.view_work.setObjectName("view_work")
        self.horizontalLayout.addWidget(self.view_work)
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(720, 10, 291, 81))
        self.groupBox_3.setTitle("")
        self.groupBox_3.setObjectName("groupBox_3")
        self.label_2 = QtWidgets.QLabel(self.groupBox_3)
        self.label_2.setGeometry(QtCore.QRect(10, 10, 41, 29))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setWordWrap(False)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.groupBox_3)
        self.label_3.setGeometry(QtCore.QRect(10, 40, 41, 29))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.DateLabel = QtWidgets.QLabel(self.groupBox_3)
        self.DateLabel.setGeometry(QtCore.QRect(50, 8, 279, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.DateLabel.setFont(font)
        self.DateLabel.setObjectName("DateLabel")
        self.TimeLabel = QtWidgets.QLabel(self.groupBox_3)
        self.TimeLabel.setGeometry(QtCore.QRect(50, 40, 279, 29))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.TimeLabel.setFont(font)
        self.TimeLabel.setObjectName("TimeLabel")
        CellAI.setCentralWidget(self.centralwidget)

        self.retranslateUi(CellAI)
        QtCore.QMetaObject.connectSlotsByName(CellAI)

    def retranslateUi(self, CellAI):
        _translate = QtCore.QCoreApplication.translate
        CellAI.setWindowFlag(QtCore.Qt.WindowMaximizeButtonHint, False)
        CellAI.setWindowTitle(_translate("CellAI", "Fraunhofer Cell Counting App"))
        self.groupBox.setTitle(_translate("CellAI", "Result"))
        self.open_file.setText(_translate("CellAI", "Select Folder"))
        self.detect_btn.setText(_translate("CellAI", "Detect"))
        self.clear_work.setText(_translate("CellAI", "Clear"))
        self.view_work.setText(_translate("CellAI", "View "))
        self.label_2.setText(_translate("CellAI", "Date :"))
        self.label_3.setText(_translate("CellAI", "Time :"))
        self.DateLabel.setText(_translate("CellAI", "0"))
        self.TimeLabel.setText(_translate("CellAI", "0"))

        self.open_file.clicked.connect(self.OpenButton_handler)
        self.detect_btn.clicked.connect(self.detect)
        self.clear_work.clicked.connect(self.MyClear)
        self.view_work.clicked.connect(self.view_handler)

        #Date and Time
        now = QtCore.QDate.currentDate()
        current_date = now.toString('dddd dd MMMM yyyy')
        self.DateLabel.setText(current_date)

        self.timer = QTimer()
        self.timer.timeout.connect(self.displayTime)
        self.timer.start(1000)

        #Files are saved here for display
        self.image_files = []

         

        
    def displayTime(self):
        currentTime = QTime.currentTime()
        displayText = currentTime.toString('hh:mm:ss')
        self.TimeLabel.setText(displayText)

    def OpenButton_handler(self):
        self.ImageBrowse()
   

    def detect(self):   
        # Object Detection
        import object_detection_counting
        os.system('python object_detection_counting.py')

        # Display Final Result
        text = open('final_result.txt').read()
        self.ResultLabel.setText(text)
        try:
            led = mydonebit.set_value(1)
        except NameError:
            print ("Error: Not Connected")

    def MyClear(self):
        try:
            import shutil

            self.ResultLabel.setText(" ")
            self.photo_img.setText(" ")
            try:
                led = mydonebit.set_value(0)
            except NameError:
                print ("Error: Not Connected")

            final_result_filePath = 'final_result.txt'
            result_filePath = 'result.txt'
            dir1 = "test_images/cropped_images" 
            dir2 = "test_images/output_images" 

            if os.path.exists(result_filePath) or os.path.exists(final_result_filePath):
                if os.path.exists(result_filePath):
                    os.remove(result_filePath)

                if os.path.exists(final_result_filePath):
                    os.remove(final_result_filePath)

                shutil.rmtree(dir1)
                shutil.rmtree(dir2)

                
                dir = 'test_images'
                for f in os.listdir(dir):
                    if f.endswith('.png'):
                        os.remove(os.path.join(dir, f))

        except IOError:
            print ("Error: Follow the neccessary steps and stop testing my Code")


    def view_handler(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_Display()
        self.ui.setupUi(self.window)
        # CellAI.hide()
        self.window.show()



    def ImageBrowse(self):
        try:
            import fnmatch
            self._base_dir = os.getcwd()
            self._images_dir = os.path.join(self._base_dir, 'test_images')
            
            self._folderPath =  QtWidgets.QFileDialog.getExistingDirectory(None, "Select Folder")
            
            for dirpath, dirs, files in os.walk(self._folderPath):
                for filename in fnmatch.filter(files, '*.png'):
                    Imagefpath = os.path.join(dirpath, filename)
                    self.image_files.append(Imagefpath)
                    self.photo_img.setPixmap(QtGui.QPixmap(self.image_files[0]))
                    self.photo_img.show()
        except IOError:
            print ("Error: Follow the neccessary steps and stop testing my Code")





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    CellAI = QtWidgets.QMainWindow()
    ui = Ui_CellAI()
    ui.setupUi(CellAI)
    CellAI.show()
    sys.exit(app.exec_())
